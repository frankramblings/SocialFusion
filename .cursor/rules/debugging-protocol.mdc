---
description:
globs:
alwaysApply: false
---
// Cursor Rule: Systematic Debugging Protocol
// Description: Enforces systematic debugging approach with comprehensive investigation steps
// Version: 1.0.0

export default {
  name: "debugging-protocol",
  description: "Enforces systematic debugging approach with comprehensive investigation steps",

  // On session start, inject debugging protocol
  onSessionStart: async ({ workspace, logger }) => {
    const debuggingProtocol = `
# Systematic Debugging Protocol

## Core Investigation Steps
- ALWAYS search the entire codebase for exact strings that appear in the UI before making assumptions
- Trace data flow from UI display back to data source - don't stop halfway
- Read comments and variable names literally - they often reveal actual intent
- When user reports specific content, grep for that exact content across all files
- Don't assume removing one method fixes the issue - verify the data flow end-to-end
- If demo/sample/test data appears in UI, search for ALL places it could be loaded from

## Investigation Protocol
1. User reports issue with specific UI content
2. Search entire codebase for exact UI text/strings
3. Identify ALL locations where this content could originate
4. Trace data flow from each source to UI display
5. Verify which codepath is actually executing
6. Only then propose targeted fixes for the active codepath

## Anti-Patterns to Avoid
- Making assumptions about what code 'should' be running
- Fixing one location without checking for others
- Ignoring comments that reveal actual behavior
- Surface-level fixes without understanding root cause
- Circular reasoning ('I fixed it' when symptoms persist)

## Key Project Context for Debugging
- iOS app combining Mastodon and Bluesky feeds
- SwiftUI + Swift Package Manager + XcodeGen
- Key files: SocialServiceManager.swift, UnifiedTimelineView.swift, PostCardView.swift
- Always ensure backward compatibility with iOS 16+ and forward compatibility with iOS 17+
- ✅ Always use iPhone 16 Pro simulator unless explicitly instructed otherwise

## Additional Debugging Notes
- When debugging UI issues: ALWAYS grep for exact UI text before making assumptions
- Follow data flow from source to display - don't stop at intermediate fixes
- Never use newline characters where they will cause an error
- Avoid editing project.pbxproj file unless absolutely necessary (always backup first)
- Primary goal: provide solutions that are effective, maintainable, and free from unintended side effects

## Project Overview
SocialFusion is a unified social media client for federated networks, specifically:
- Mastodon
- Bluesky
- Plans to add support for other federated networks

## Core Vision
The goal is to bring all your federated feeds into one clean, modern interface where you can:
- Interact with them all seamlessly
- Publish across networks easily
- Create "the unified timeline we all need"

## Key Features
- Multiple timeline views: All Mastodon, all Bluesky, or unified timeline
- Timeline pinning: Pin different timelines like:
  - Different Mastodon lists
  - Bluesky feeds
  - Different combinations of accounts (personal vs business)
- Cross-network publishing: Easy posting across multiple platforms

## Technical Stack
- Platform: iOS app (iOS 16+ backward compatible, iOS 17+ forward compatible)
- Framework: SwiftUI
- Build System: Swift Package Manager + XcodeGen
- Architecture: Federated social network integration
- Development Environment: iPhone 16 Pro simulator (default)

## Design Philosophy
- Sophisticated simplicity (Steve Jobs approach)
- Natural interactions - aiming for breakthrough UX on the magnitude of pull-to-refresh
- Clean, modern interface following Apple design principles
- Industrial design and UI design that make Apple products unique`;

    logger.info("[Systematic Debugging Protocol]\n" + debuggingProtocol);
    return true;
  },

  // On file save, remind about debugging protocol if changes were made
  onFileSave: async ({ file, workspace, logger }) => {
    if (file.path.endsWith('.swift')) {
      logger.info("⚠️ Remember to follow systematic debugging protocol for changes to: " + file.path);
    }
    return true;
  }
};
