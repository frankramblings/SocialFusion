---
description:
globs:
alwaysApply: false
---
// Cursor Rule: Parent Post Prefetch
// Description: Optimizes loading of parent posts in social media threads
// Version: 1.0.0

export default {
  name: "parent-post-prefetch",
  description: "Optimizes loading of parent posts in social media threads",
  
  // This rule triggers when files related to post loading are opened
  onFileOpen: async ({ file, workspace, logger }) => {
    // Only run for relevant files
    const relevantFiles = [
      "PostCardView.swift",
      "UnifiedTimelineView.swift",
      "PostDetailView.swift",
      "BlueskyService.swift",
      "MastodonService.swift"
    ];
    
    const fileName = file.path.split("/").pop();
    if (!relevantFiles.includes(fileName)) {
      return true;
    }
    
    logger.info(`Analyzing ${fileName} for parent post loading patterns...`);
    
    // Check if the file contains parent post loading logic
    const content = await workspace.readFile(file.path);
    
    if (content.includes("parentPost") && content.includes("isLoadingParentPost")) {
      // Suggest optimizations for parent post loading
      logger.info("Parent post loading detected. Checking for optimization opportunities...");
      
      // Check for prefetching implementation
      if (!content.includes("prefetchParentPost")) {
        logger.warn("Consider implementing parent post prefetching to improve performance");
        logger.info("Prefetching can reduce waiting time when users view conversation threads");
      }
      
      // Check for caching implementation
      if (!content.includes("postCache") && !content.includes("cachedPosts")) {
        logger.warn("Consider implementing post caching to avoid redundant network requests");
      }
    }
    
    return true;
  },
  
  // This rule also checks saved files for improved parent post handling
  onFileSave: async ({ file, workspace, logger }) => {
    // Only run for post-related view files
    if (file.path.includes("PostCardView.swift") || file.path.includes("PostDetailView.swift")) {
      const content = await workspace.readFile(file.path);
      
      // Check for common parent post loading issues
      if (content.includes("parentPost") && content.includes("async") && !content.includes("Task")) {
        logger.warn("Parent post loading should use Task for proper cancellation support");
        logger.info("Example: Task { await loadParentPost() }");
      }
    }
    
    return true;
  }
};
