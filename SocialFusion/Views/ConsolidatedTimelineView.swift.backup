import SwiftUI

/// Consolidated timeline view with native Apple Liquid Glass implementation
struct ConsolidatedTimelineView: View {
    @StateObject private var controller: UnifiedTimelineController
    @EnvironmentObject private var serviceManager: SocialServiceManager
    @EnvironmentObject private var navigationEnvironment: PostNavigationEnvironment
    @State private var isRefreshing = false
    @State private var scrollVelocity: CGFloat = 0
    @State private var lastScrollTime = Date()
    @State private var scrollCancellationTimer: Timer?
    @Namespace private var glassNamespace

    init() {
        _controller = StateObject(wrappedValue: UnifiedTimelineController())
    }

    var body: some View {
        NavigationStack(
            path: Binding(
                get: { navigationEnvironment.navigationPath },
                set: { navigationEnvironment.navigationPath = $0 }
            )
        ) {
            contentView
                .navigationTitle("Timeline")
                .navigationBarTitleDisplayMode(.large)
                .navigationDestination(
                    for: Post.self
                ) { post in
                    PostDetailView(
                        viewModel: PostViewModel(
                            post: post, serviceManager: serviceManager),
                        focusReplyComposer: false
                    )
                    .environmentObject(serviceManager)
                    .environmentObject(navigationEnvironment)
                }
        }
        .task {
            await controller.ensureTimelineLoaded()
        }
        .alert("Error", isPresented: .constant(controller.error != nil)) {
            Button("OK") {
                controller.clearError()
            }
        } message: {
            Text(controller.error?.localizedDescription ?? "Unknown error")
        }
    }

    @ViewBuilder
    private var contentView: some View {
        if controller.posts.isEmpty && controller.isLoading {
            loadingView
        } else if controller.posts.isEmpty && !controller.isLoading {
            emptyView
        } else {
            timelineView
        }
    }

    private var loadingView: some View {
        VStack(spacing: 16) {
            ProgressView()
                .scaleEffect(1.2)
            Text("Loading timeline...")
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }

    private var emptyView: some View {
        VStack(spacing: 16) {
            Image(systemName: "timeline.selection")
                .font(.system(size: 48))
                .foregroundColor(.secondary)
            Text("No posts yet")
                .font(.title2)
                .fontWeight(.medium)
            Text("Pull to refresh or add some accounts to get started")
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }

    private var timelineView: some View {
        ScrollViewReader { proxy in
            ScrollView {
                // Native Apple Liquid Glass container for posts
                GlassEffectContainer(spacing: 1.0) {
                    LazyVStack(spacing: 0) {
                        ForEach(Array(controller.posts.enumerated()), id: \.element.id) {
                            index, post in
                            postCard(for: post)
                                .glassEffect(.regular)
                                .glassEffectID(post.id, in: glassNamespace)
                                .onAppear {
                                    if shouldLoadMorePosts(currentIndex: index) {
                                        Task {
                                            await loadMorePosts()
                                        }
                                    }
                                }

                            // Native separator between posts
                            if post.id != controller.posts.last?.id {
                                nativeSeparator
                            }
                        }

                        // Loading indicator at the bottom
                        if serviceManager.isLoadingNextPage {
                            infiniteScrollLoadingView
                                .padding(.vertical, 20)
                        }

                        // End of timeline indicator
                        if !serviceManager.hasNextPage && !controller.posts.isEmpty {
                            endOfTimelineView
                                .padding(.vertical, 20)
                        }
                    }
                }
                .background(
                    GeometryReader { geometry in
                        Color.clear
                            .preference(
                                key: ScrollOffsetPreferenceKey.self,
                                value: geometry.frame(in: .named("scrollView")).origin.y)
                    }
                )
            }
            .coordinateSpace(name: "scrollView")
            .background(.ultraThinMaterial)
            .scrollContentBackground(.hidden)
            .onPreferenceChange(ScrollOffsetPreferenceKey.self) { offset in
                handleScrollChange(offset: offset)
            }
            .refreshable {
                await refreshTimeline()
            }
        }
    }

    @ViewBuilder
    private var nativeSeparator: some View {
        // Native Apple separator - minimal and elegant
        Rectangle()
            .fill(.quaternary)
            .frame(height: 0.5)
            .padding(.horizontal, 20)
    }

    private var infiniteScrollLoadingView: some View {
        HStack(spacing: 12) {
            ProgressView()
                .scaleEffect(0.8)
            Text("Loading more posts...")
                .font(.subheadline)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
        .padding(.horizontal)
    }

    private var endOfTimelineView: some View {
        VStack(spacing: 8) {
            Image(systemName: "checkmark.circle.fill")
                .font(.title2)
                .foregroundColor(.green)
            Text("You're all caught up!")
                .font(.subheadline)
                .fontWeight(.medium)
            Text("No more posts to load")
                .font(.caption)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
        .padding(.horizontal)
    }

    private func postCard(for post: Post) -> some View {
        let entryKind: TimelineEntryKind
        if let boostedBy = post.boostedBy {
            entryKind = .boost(boostedBy: boostedBy)
        } else if post.inReplyToID != nil {
            entryKind = .reply(parentId: post.inReplyToID!)
        } else {
            entryKind = .normal
        }

        return PostCardView(
            entry: TimelineEntry(
                id: post.stableId,
                kind: entryKind,
                post: post,
                createdAt: post.createdAt
            ),
            onPostTap: {
                navigationEnvironment.navigateToPost(post)
            },
            onParentPostTap: { parentPost in
                navigationEnvironment.navigateToPost(parentPost)
            },
            onRepost: {
                Task {
                    await controller.repostPost(post)
                }
            },
            onLike: {
                Task {
                    await controller.likePost(post)
                }
            }
        )
    }

    private func refreshTimeline() async {
        isRefreshing = true
        serviceManager.resetPagination()
        await controller.refreshTimeline(force: true)
        isRefreshing = false
    }

    private func shouldLoadMorePosts(currentIndex: Int) -> Bool {
        let totalPosts = controller.posts.count
        let threshold = max(5, totalPosts / 4)

        return currentIndex >= totalPosts - threshold && serviceManager.hasNextPage
            && !serviceManager.isLoadingNextPage
    }

    private func loadMorePosts() async {
        guard serviceManager.hasNextPage && !serviceManager.isLoadingNextPage else {
            return
        }

        await serviceManager.fetchNextPage()
    }

    private func handleScrollChange(offset: CGFloat) {
        let now = Date()
        let timeDelta = now.timeIntervalSince(lastScrollTime)

        if timeDelta > 0 {
            let offsetDelta = abs(offset - scrollVelocity)
            let velocity = offsetDelta / timeDelta
            let fastScrollThreshold: CGFloat = 500

            if velocity > fastScrollThreshold {
                ImageCache.shared.cancelLowPriorityRequests()

                scrollCancellationTimer?.invalidate()
                scrollCancellationTimer = Timer.scheduledTimer(
                    withTimeInterval: 0.5, repeats: false
                ) { _ in
                    // Resume normal loading
                }
            }
        }

        scrollVelocity = offset
        lastScrollTime = now
    }
}

/// PreferenceKey for scroll offset detection
struct ScrollOffsetPreferenceKey: PreferenceKey {
    static var defaultValue: CGFloat = 0

    static func reduce(value: inout CGFloat, nextValue: () -> CGFloat) {
        value = nextValue()
    }
}

#Preview {
    ConsolidatedTimelineView()
}
